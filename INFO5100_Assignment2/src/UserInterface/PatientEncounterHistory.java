/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface;

import Data.Ecosystem;
import Model.Encounter;
import Model.Patient;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sujithkaluva
 */
public class PatientEncounterHistory extends javax.swing.JPanel {
Ecosystem ecoSystem = Ecosystem.getInstance();
Patient patient;
    /**
     * Creates new form PatientEncounterHistory
     */
    public PatientEncounterHistory(Patient patient) {
        initComponents();
        this.patient = patient;
        TableFilling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        encounter_history = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Encounter History");

        jScrollPane1.setBackground(new java.awt.Color(153, 153, 255));

        encounter_history.setBackground(new java.awt.Color(51, 51, 51));
        encounter_history.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        encounter_history.setForeground(new java.awt.Color(255, 255, 255));
        encounter_history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Encounter Date", "Diagnosis", "Doctor Name", "Temperature", "Pulse Rate", "Respiratory Rate", "Blood Presssure", "Oxygen Saturation", "Weight", "Height"
            }
        ));
        jScrollPane1.setViewportView(encounter_history);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 953, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable encounter_history;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void TableFilling() {
    DefaultTableModel model = (DefaultTableModel) encounter_history.getModel();
        model.setRowCount(0);
        for(Encounter en : ecoSystem.getEncounterHistory().getEncounterHistory())
             
            {
                if(patient.getEmailId().equals(en.getPatient().getEmailId())&&patient.getPassword().equals(en.getPatient().getPassword()))
           {
                
            Object[] row = new Object[10];
            row[0] = en.getEncounterDate();
            row[1] = en.getDiagnosis();
            row[2] = en.getDoctor().getFirstName()+""+en.getDoctor().getLastName();
            row[3] = en.getVitalSign().getBodyTemp();
            row[4] = en.getVitalSign().getPulseRate();
            row[5] = en.getVitalSign().getRespiratoryRate();
            row[6] = en.getVitalSign().getBloodPressure();
            row[7] = en.getVitalSign().getOxygenSaturation();
            row[8] = en.getVitalSign().getWeight();
            row[9] = en.getVitalSign().getHeight();
            model.addRow(row);
            }}
    
    }
}
